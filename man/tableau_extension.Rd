% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tableauextension.R
\name{tableau_extension}
\alias{tableau_extension}
\title{Create a Tableau Extension object}
\usage{
tableau_extension(
  manifest,
  ui,
  server,
  config_ui = NULL,
  config_server = NULL,
  options = ext_options()
)
}
\arguments{
\item{manifest}{A Tableau manifest object, which provides a description of
the extension for both human and machine use.

The easiest way to provide this information is by creating a manifest.yml
file. Call the \code{\link[=yaml_skeleton]{yaml_skeleton()}} function from the R prompt to create a
sample manifest.yml in the same directory as your app.R file, then
customize it for your extension. Then, in app.R, call \verb{manifest <- [tableau_manifest_from_yaml()]} and pass the \code{manifest} object as this
argument.}

\item{ui}{\strong{A function that takes a single \code{req} argument} and returns the
UI definition of the extension. When the extension is added to a Tableau
dashboard, this is the UI that will be displayed within the extension
object.}

\item{server}{A function with three parameters (\code{input}, \code{output}, and
\code{session}) that sets up the server-side reactive logic to go with \code{ui}.}

\item{config_ui}{Optional. \strong{A function that takes a single \code{req} argument}
and returns the UI definition to be used for the extension's configuration
dialog. Unlike regular Shiny UI definitions, this should just be a
\code{\link[shiny:reexports]{shiny::tagList()}} or HTML object rather than an entire page like
\code{\link[shiny:fluidPage]{shiny::fluidPage()}} or \code{\link[shiny:fillPage]{shiny::fillPage()}}.}

\item{config_server}{Optional. A function with four parameters (\code{input},
\code{output}, \code{session}, and \code{iv}) that sets up the server-side reactive logic
to go with \code{config_ui}. The \code{iv} parameter is a
\link[shinyvalidate:InputValidator]{shinyvalidate::InputValidator} object that will enable when the config
dialog's OK or Apply buttons are clicked. The \code{config_server} function must
return a zero-argument function that, when run, calls
\code{\link[=update_tableau_settings_async]{update_tableau_settings_async()}} to persist the user's configuration
preferences.}

\item{options}{See \code{\link[=ext_options]{ext_options()}}.}
}
\description{
\code{tableau_extension()} is to shinytableau extensions, what \code{\link[shiny:shinyApp]{shiny::shinyApp()}}
is to Shiny apps. Both functions are used as the last expression of an app.R
file, and bring together the \code{ui} and \code{server} objects. However,
\code{tableau_extension()} has additional arguments for the Tableau extension
manifest (required) and configuration dialog UI and server (optional).
}
\seealso{
See the \href{https://rstudio.github.io/shinytableau/articles/shinytableau.html}{Getting Started guide}
to learn more.
}
