% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module-data.R
\name{choose_data_unpack}
\alias{choose_data_unpack}
\title{Unpack settings from a `choose_data` module for `restore_input`}
\usage{
choose_data_unpack(id, spec = isolate(tableau_setting(id)))
}
\arguments{
\item{id}{The same value as the `id` you're passing to the [choose_data()]
module. (You'll need to call this once for each module you want to
restore.)}

\item{setting}{Either `NULL`, or a data spec object, as generated by
[choose_data()]. By default, will look for a Tableau setting named after
the `id` value; pass `tableau_setting("some_other_value")` if you have
saved the setting with a different name than the `id`.}
}
\description{
The [choose_data()] module returns a spec object, suitable for storing as a
[tableau_setting()] and eventually passing to [reactive_tableau_data()]. This
function unpacks such a spec object and returns a list of input names/values
that can be passed to [restore_input()], using the rlang spread operator
("`!!!`", see Examples below).
}
\examples{
config_server <- function(input, output, session) {
  restore_inputs(
    !!!choose_data_unpack("data1")
  )

  data1 <- choose_data("data1")

  observe(input$ok, {
    update_tableau_settings(
      data1 = data1()
    )
  })
}

}
