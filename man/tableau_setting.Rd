% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/settings.R
\name{tableau_setting}
\alias{tableau_setting}
\alias{tableau_settings_all}
\title{Read Tableau extension settings}
\usage{
tableau_setting(
  name,
  default = NULL,
  session = shiny::getDefaultReactiveDomain()
)

tableau_settings_all(session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{name}{The name of a setting to retrieve.}

\item{default}{The value to return if the requested setting has not been set.}

\item{session}{The Shiny \code{session} object. (You should probably just use the
default.)}
}
\value{
For \code{tableau_setting()}, an object that was previously saved via
\code{update_tableau_settings_async}, or the \code{default} value. For
\code{tableau_settings_all()}, a named list containing all of the settings.
}
\description{
Call \code{tableau_setting()} from an extension's \code{server} and \code{config_server}
functions to read settings that were previously set via
\code{\link[=update_tableau_settings_async]{update_tableau_settings_async()}}.
}
\details{
A typical extension will call \code{\link[=update_tableau_settings_async]{update_tableau_settings_async()}} from
\code{config_server} to write settings, and \code{\link[=tableau_setting]{tableau_setting()}} from \code{server} to
read settings.

Note that both \code{tableau_setting()} and \code{tableau_settings_all()} are reactive
reads; in order to call these functions you must be inside a reactive context
(i.e. reactive expression, reactive observer, output render expression, or
\code{\link[=isolate]{isolate()}}), and future updates to a setting that was read will cause
reactive invalidation.
}
