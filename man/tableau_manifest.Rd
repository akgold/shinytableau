% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trex.R
\name{tableau_manifest}
\alias{tableau_manifest}
\title{Generate a Tableau Extension Manifest}
\usage{
tableau_manifest(extension_id = "com.example.extensions.name",
  extension_version = "0.1.0", name = "My extension",
  description = NULL, extended_description = description,
  author_name = "Your Name", author_email = "author@example.com",
  author_organization = "Example Organization",
  website = "https://example.com", source_location = NULL,
  icon_file = system.file("default_icon.png", package = "shinytableau"),
  permissions = c("full data"), min_api_version = "1.4")
}
\arguments{
\item{extension_id}{The ID value for the Tableau extension which follows the
reverse domain name pattern. By default, this is set to a placeholder value
of \code{"com.example.extensions.name"}}

\item{extension_version}{The version number for the extension. The default
value for this is \code{"0.1.0"}.}

\item{name}{The name of the extension. This name will appear as given under
\emph{Extensions} on a \emph{Tableau} dashboard sheet.}

\item{description, extended_description}{The description and extended
description for the extension. Whereas \code{description} expects a relatively
short amount of text, the \code{extended_description} parameter serves as a
long-form description of the extension. HTML text can be used for the
latter.}

\item{author_name, author_email, author_organization, website}{Details about the
extension author and the project website.}

\item{source_location}{The source location, which is the URL of the server
that hosts the web page that in turns interacts with Tableau. If \code{NULL}
(the default, and a good option) then \strong{shinytableau} will autodetect
the source location.}

\item{icon_file}{The path to the icon file to be used for the extension. The
image used as an icon file must be a 70x70px PNG file.}

\item{permissions}{A setting that determines the level of permissions. The
value \code{"full_data"} is the default and is currently the only available
option for Tableau extensions. This declaration is required since the
extension can access the underlying data or information about the data
sources.}

\item{min_api_version}{This specifies the minimum API version required for
running the extension. The default for this is \code{"1.4"}.}
}
\description{
The \code{tableau_manifest()} function generates Tableau Extension Manifest XML
which constitutes the extension manifest file (with the standard extension
\code{.trex}). This XML text contains metadata for the extension and is used for
registration. When generating your \strong{shinytableau} extension app, the value
generated by the call to \code{tableau_manifest()} to passed to
\code{\link[=tableau_extension]{tableau_extension()}}'s \code{manifest} argument.

An often preferable alternative to using the \code{tableau_manifest()} function in
a \strong{shinytableau} extension app is to use a YAML manifest file. A skeleton
YAML manifest file can be created via the \code{\link[=yaml_skeleton]{yaml_skeleton()}} function. Once
the YAML file is edited to reflect the app being authored, it can be linked
to a \strong{shinytableau} extension app by using the
\code{\link[=tableau_manifest_from_yaml]{tableau_manifest_from_yaml()}} (in place of the \code{tableau_manifest()} call).
}
\examples{
# Create a Tableau Manifest via the
# `tableau_manifest()` function
tableau_manifest(
  extension_id = "com.example.ggvoronoi",
  extension_version = "1.1.3",
  name = "Voronoi Plot",
  description = "Insert a Voronoi plot using ggvoronoi",
  author_name = "Jane Doe",
  author_email = "jane_doe@example.com",
  website = "https://example.com/tableau/extensions/ggvoronoi"
)

}
\seealso{
The functions used in the alternative workflow for generating
Tableau Extension Manifest XML: \code{\link[=yaml_skeleton]{yaml_skeleton()}} and
\code{\link[=tableau_manifest_from_yaml]{tableau_manifest_from_yaml()}}.
}
