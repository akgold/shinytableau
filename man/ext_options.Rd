% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tableauextension.R
\name{ext_options}
\alias{ext_options}
\title{Specify options for \code{tableau_extension}}
\usage{
ext_options(
  config_width = 600,
  config_height = 400,
  prompt_for_config = TRUE,
  standalone = FALSE,
  ...
)
}
\arguments{
\item{config_width, config_height}{Numeric value specifying the initial width
and height of the extension's configuration dialog (if any). In pixels.}

\item{prompt_for_config}{If the extension provides a configuration dialog
(i.e. \code{\link[=tableau_extension]{tableau_extension()}} is called with a \code{config_ui} argument),
\code{prompt_for_config=TRUE} (the default) means that a newly added extension
should not even attempt to render its \code{ui} and \code{server} in the dashboard;
instead, a message instructing the Tableau user to use the configuration
dialog is displayed instead.

Use \code{prompt_for_config=FALSE} if the extension is able to run even without
initial configuration.}

\item{standalone}{Some shinytableau projects might not be extensions at all,
but rather apps that can run both inside and outside of Tableau dashboards.
Such apps should use \code{standalone=TRUE}. The default is \code{FALSE}, indicating
that the app is a true Tableau extension and should not attempt to run
outside of a Tableau dashboard.

See the vignette on standalone apps for more information. TODO}

\item{...}{Options to pass through to \link[shiny:runApp]{shiny::runApp} (e.g. \code{port},
\code{launch.browser}, \code{host}, \code{quiet}). For local development purposes, it's a
good idea to assign \code{port} to a hardcoded number between 1025 and 49151
that is unique for each extension.}
}
\value{
A list object, suitable for passing to \code{tableau_extension(options = ...)}.
}
\description{
Use this function to modify the configuration options available for your
Tableau extension. Pass the resulting value as the \code{options} argument to
\code{\link[=tableau_extension]{tableau_extension()}}.
}
